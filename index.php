<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <title>Домашнее задание к лекции 3.3 «Пространства имен, перегрузка и встроенные интерфейсы и классы»</title>
  <style>
    body {
    font-size: 16px;
    font-family: "Trebuchet MS", Helvetica, sans-serif;
    }
    h1, h2 {
    font-size: 22px;
    font-weight: 700;
    color: blue;
    }
    article {
    display: block;
    position: relative;
    margin: 0 auto;   
    width: 800px;
    }
    p {
    font-family: "Arial", Helvetica, sans-serif;
    font-size: 17px;      
    }

  </style>
</head>
<body>

<article>
<h1>Формулировки и пояснения</h1>
<p><strong>Пространства имен</strong> – это универсальный способ для группировки и вызова логически связанных классов, интерфейсов, функций и констант, избегая при этом конфликтов и проблем, возможных при наличии классов и функций с одинаковыми названиями от разных разработчиков.</p>
<p>Как и структура папок в компьютере, пространство имен исключает дублирование названий директорий и находящихся в них файлов, но допускает существование файлов с одинаковым именем в разных директориях. «Гибкость» этого способа позволяет использовать в одном файле одноименные классы и функции, хранящиеся в разных директориях нашего проекта.</p>
<p>Кроме того, пространство имен позволяет создавать псевдонимы вместо прописывания длинного пути к нужному файлу, что значительно облегчает код и исключает ошибки при вводе полного пути к интересующему классу или функции. Наконец, благодаря пространству имен мы можем автоматически загружать классы, не «копипастя» их каждый раз в коде, что также облегчает сам код.</p>

<p><strong>Исключения</strong> – чрезвычайно удобный механизм для работы с ошибками и при необходимости управления потоком кода. С их помощью можно обработать любую ошибочную ситуацию и предложить свой вариант ее решения.</p>
<p>Если верить документации, то исключения позволяют обрабатывать ошибки не только в синтаксисе языка PHP, но и в логике кода (правда, из-за недостатка опыта я еще не имел возможности проверить на практике отлов ошибок в логике).</p>
<p>По сути своей исключения – это обычные классы (встроенный в PHP класс Exception или его «наследники»). Исключения можно сгенерировать («выбросить» с помощью оператора throw) и перехватить («отловить с помощью оператора catch). При этом код исключения должен быть заключен в блок try, который, в свою очередь, должен иметь соответствующий ему блок catch.</p>
<p>При использовании нескольких блоков catch исключения могут работать как «сито», позволяя оценивать код на ошибки в разных его местах.</p>

<!--
<h2>Ссылки:</h2>
 <ul>
  <li><a href="">**************</a></li>
  <li><a href="">**************</a></li>
</ul>
 --><br>
</article>
</body>
</html>